plugins {
    id 'java-library'
    id "com.github.node-gradle.node" version "2.2.4"
}

group = 'com.coolspy3'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven {
        url 'https://jitpack.io/'
    }
}

configurations {
    inJar
}

configurations.compile.extendsFrom(configurations.inJar)

dependencies {
    compileOnly 'com.coolspy3:CSModLoader:unspecified'
    compileOnly 'com.google.code.gson:gson:2.8.8'
    compileOnly group: 'commons-io', name: 'commons-io', version: '2.6'
    inJar 'com.github.Querz:NBT:6.1'
    testImplementation     'junit:junit:4.13'
}

jar {
    from(configurations.inJar) {
        into 'META-INF/libraries'
    }
}

// Template generation code for gradle Credit: DeepBlueRobotics

def templateDir = "${projectDir}/asyncapi-template"
task archiveTemplate(type: Tar) {
    archiveFileName = "asyncapi-template.tar"
    destinationDirectory = file("$buildDir/tmp")

    from(templateDir) {
      exclude "node_modules"
      into "asyncapi-template" // npm requires that everything be in a top-level folder
    }
}

// Add a task to generate java source code for the packets using npx to run
// the asyncapi generator.
task generatePacketFiles(type: NpxTask) {
    def outputDir = "${buildDir}/generated/sources/asyncapi"

    // Define the command line that npx should use
    workingDir = buildDir // Because templateDir can't be under it
    command = '@asyncapi/generator'
    args = ['--force-write',
        '-o', "${outputDir}/com/coolspy3/cspackets/packets",
        "${projectDir}/generator_specification.yaml",
        file(archiveTemplate.archiveFile).toURI()]

    // Define the inputs and outputs of this task so that gradle only runs it
    // when necessary.
    inputs.files(archiveTemplate.outputs)
    inputs.files("${projectDir}/generator_specification.yaml")
    inputs.files("${projectDir}/generator_types.json")
    outputs.dir(outputDir).withPropertyName("outputDir")

}

// Include the generated files in the source to compile.
sourceSets.main.java.srcDirs generatePacketFiles.outputs

// Use a version of node and npm that is known to work.
node {
  download = true
  version = '14.15.1'
  npmVersion = '6.14.8'
}
